#include <cstring>
#include <iostream>
#include <fstream>
#include <map>
#include <vector>
using s=std::string;using t16=std::int16_t;s b64c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";bool is_base64(unsigned char c){return(isalnum(c)||(c=='+')||(c=='/'));}s input="";int main(){int il=input.size(),i=0,j=0,in_=0;unsigned char c4[4], c3[3]; s ret; while (il-- && (input[in_] != '=') && is_base64(input[in_])) { c4[i++] = input[in_]; in_++; if (i == 4) { for (i = 0; i < 4; i++)c4[i] = b64c.find(c4[i]); c3[0] = (c4[0] << 2) + ((c4[1] & 0x30) >> 4); c3[1] = ((c4[1] & 0xf) << 4) + ((c4[2] & 0x3c) >> 2); c3[2] = ((c4[2] & 0x3) << 6) + c4[3]; for (i = 0; (i < 3); i++)ret += c3[i]; i = 0; } }if (i) { for (j = i; j < 4; j++)c4[j] = 0; for (j = 0; j < 4; j++)c4[j] = b64c.find(c4[j]); c3[0] = (c4[0] << 2) + ((c4[1] & 0x30) >> 4); c3[1] = ((c4[1] & 0xf) << 4) + ((c4[2] & 0x3c) >> 2); c3[2] = ((c4[2] & 0x3) << 6) + c4[3]; for (j = 0; (j < i - 1); j++)ret += c3[j]; }std::map<t16, s> d; for (t16 i = 0; i < 256; ++i) { d[i] = s(1, i); }t16 ds = d.size(); std::vector<t16> da; da.resize(ret.size() / sizeof(t16)); std::memcpy(da.data(), ret.data(), ret.size()); auto b = da.begin(), end = da.end(); s w = d[*b++]; s re = w; s e; for (; b != end; b++) { t16 k = *b; if (d.count(k)) { e = d[k]; } else if (k == ds) { e = w + w[0]; }re += e; d[ds++] = w + e[0]; w = e; }s o; {std::map<char, char> d{ {0,'A'},{1,'C'},{2,'G'},{3,'T'} }; for (char c : re) { o.append(1, d[((c & 0b11000000) >> 6)]); o.append(1, d[((c & 0b00110000) >> 4)]); o.append(1, d[((c & 0b00001100) >> 2)]); o.append(1, d[((c & 0b00000011))]); }}std::cout << o.c_str();}
